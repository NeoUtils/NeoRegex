[versions]
agp = "8.5.2"
cmp = "1.7.0" # Jetpack Compose 1.7.0 & APG 8.1+
dbus-java-core = "5.1.0"
kotlin = "2.0.20" # Gradle 7.5 ~ 8.8 & AGP 7.4.2 ~ 8.5
kotlinx-serialization = "1.7.3"
multiplatform-settings = "1.2.0"
slf4j-nop = "2.0.16"
voyager = "1.1.0-beta03" # 1.1.0+ is required for web support
koin = "4.0.0"

# androix
androidx-compose = "1.7.4"
androidx-activity = "1.9.3"
androidx-lifecycle = "2.8.3"

# kotlinx
kotlinx-coroutines = "1.9.0"

highlight = "2.3.0-snapshot15"
xregex = "1.0.0-snapshot5"

[libraries]

# plugins
plugin-android-gradle = { module = "com.android.tools.build:gradle", version.ref = "agp" }
plugin-kotlin-gradle = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin" }
plugin-compose = { group = "org.jetbrains.compose", name = "compose-gradle-plugin", version.ref = "cmp" }
plugin-compose-compiler = { group = "org.jetbrains.kotlin", name = "compose-compiler-gradle-plugin", version.ref = "kotlin" }

# android
androidx-compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "androidx-compose" }

androidx-activity = { module = "androidx.activity:activity", version.ref = "androidx-activity" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity" }
androidx-lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }

# multiplatform
androidx-multplatform-lifecycle-viewmodel = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel", version.ref = "androidx-lifecycle" }
androidx-multplatform-lifecycle-viewmodel-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
androidx-multplatform-lifecycle-runtime-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }

neoutils-xregex = { group = "com.neoutils.xregex", name = "xregex", version.ref = "xregex" }
highlight-compose = { module = "com.neoutils.highlight:highlight-compose", version.ref = "highlight" }

multiplatform-settings-noArg = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatform-settings" }
multiplatform-settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatform-settings" }

voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyager" }
voyager-screenModel = { module = "cafe.adriel.voyager:voyager-screenmodel", version.ref = "voyager" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyager" }

kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-coroutines-core = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }

koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin" }

kotlin-test = { group = "org.jetbrains.kotlin", name = "kotlin-test", version.ref = "kotlin" }

# desktop
kotlinx-coroutines-swing = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
slf4j-nop = { module = "org.slf4j:slf4j-nop", version.ref = "slf4j-nop" }

dbus-java-core = { module = "com.github.hypfvieh:dbus-java-core", version.ref = "dbus-java-core" }
dbus-java-transport-native-unixsocket = { module = "com.github.hypfvieh:dbus-java-transport-native-unixsocket", version.ref = "dbus-java-core" }

[plugins]

# android
android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }

# multiplatform
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kmp-compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kmp-compose = { id = "org.jetbrains.compose", version.ref = "cmp" }

# internal
neoutils-neoregex-core = { id = "com.neoutils.neoregex.core", version = "undefined" }
neoutils-neoregex-web = { id = "com.neoutils.neoregex.web-app", version = "undefined" }
neoutils-neoregex-desktop = { id = "com.neoutils.neoregex.desktop-app", version = "undefined" }
neoutils-neoregex-android = { id = "com.neoutils.neoregex.android-app", version = "undefined" }